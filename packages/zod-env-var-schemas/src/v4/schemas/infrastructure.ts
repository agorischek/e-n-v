import { z } from "zod";
import {
  AWS_REGION_PATTERN,
  AWS_S3_BUCKET_NAME_PATTERN,
  AWS_SQS_QUEUE_URL_PATTERN,
  AZURE_EVENT_HUB_CONNECTION_STRING_PATTERN,
  AZURE_SERVICE_BUS_CONNECTION_STRING_PATTERN,
  AZURE_STORAGE_ACCOUNT_NAME_PATTERN,
  AZURE_STORAGE_CONNECTION_STRING_PATTERN,
  HOST_PORT_LIST_PATTERN,
  HTTP_PROTOCOL_PATTERN,
  KUBERNETES_NAME_PATTERN,
  RABBITMQ_URL_PATTERN,
  SENTRY_DSN_PATTERN,
} from "../../shared/patterns";
import {
  INFRASTRUCTURE_DEFAULTS,
  INFRASTRUCTURE_DESCRIPTIONS,
  INFRASTRUCTURE_LIMITS,
  INFRASTRUCTURE_MESSAGES,
} from "../../shared/infrastructure";

/**
 * Azure Storage Account connection string
 * Format: DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=key;EndpointSuffix=core.windows.net
 */
export const AZURE_STORAGE_CONNECTION_STRING = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AZURE_STORAGE_CONNECTION_STRING)
  .regex(AZURE_STORAGE_CONNECTION_STRING_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AZURE_STORAGE_CONNECTION_STRING_FORMAT,
  });

/**
 * Azure Storage Account name
 */
export const AZURE_STORAGE_ACCOUNT_NAME = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AZURE_STORAGE_ACCOUNT_NAME)
  .regex(AZURE_STORAGE_ACCOUNT_NAME_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AZURE_STORAGE_ACCOUNT_NAME_FORMAT,
  });

/**
 * Azure Storage Account key
 */
export const AZURE_STORAGE_ACCOUNT_KEY = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AZURE_STORAGE_ACCOUNT_KEY)
  .min(1, { error: INFRASTRUCTURE_MESSAGES.AZURE_STORAGE_ACCOUNT_KEY_REQUIRED });

/**
 * Azure Service Bus connection string
 */
export const AZURE_SERVICE_BUS_CONNECTION_STRING = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AZURE_SERVICE_BUS_CONNECTION_STRING)
  .regex(AZURE_SERVICE_BUS_CONNECTION_STRING_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AZURE_SERVICE_BUS_CONNECTION_STRING_FORMAT,
  });

/**
 * Azure Event Hub connection string
 */
export const AZURE_EVENT_HUB_CONNECTION_STRING = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AZURE_EVENT_HUB_CONNECTION_STRING)
  .regex(AZURE_EVENT_HUB_CONNECTION_STRING_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AZURE_EVENT_HUB_CONNECTION_STRING_FORMAT,
  });

/**
 * Amazon SQS queue URL
 */
export const AWS_SQS_QUEUE_URL = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AWS_SQS_QUEUE_URL)
  .regex(AWS_SQS_QUEUE_URL_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AWS_SQS_QUEUE_URL_FORMAT,
  });

/**
 * AWS region
 */
export const AWS_REGION = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AWS_REGION)
  .regex(AWS_REGION_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AWS_REGION_FORMAT,
  });

/**
 * AWS access key ID
 */
export const AWS_ACCESS_KEY_ID = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AWS_ACCESS_KEY_ID)
  .min(INFRASTRUCTURE_LIMITS.AWS_ACCESS_KEY_ID_MIN, { error: INFRASTRUCTURE_MESSAGES.AWS_ACCESS_KEY_ID_MIN })
  .max(INFRASTRUCTURE_LIMITS.AWS_ACCESS_KEY_ID_MAX, { error: INFRASTRUCTURE_MESSAGES.AWS_ACCESS_KEY_ID_MAX });

/**
 * AWS secret access key
 */
export const AWS_SECRET_ACCESS_KEY = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AWS_SECRET_ACCESS_KEY)
  .min(1, { error: INFRASTRUCTURE_MESSAGES.AWS_SECRET_ACCESS_KEY_REQUIRED });

/**
 * AWS S3 bucket name
 */
export const AWS_S3_BUCKET_NAME = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.AWS_S3_BUCKET_NAME)
  .regex(AWS_S3_BUCKET_NAME_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.AWS_S3_BUCKET_NAME_FORMAT,
  });

/**
 * Elasticsearch/OpenSearch URL
 */
export const ELASTICSEARCH_URL = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.ELASTICSEARCH_URL)
  .url({ error: INFRASTRUCTURE_MESSAGES.ELASTICSEARCH_URL_FORMAT })
  .regex(HTTP_PROTOCOL_PATTERN, { error: INFRASTRUCTURE_MESSAGES.ELASTICSEARCH_URL_PROTOCOL });

/**
 * Elasticsearch username
 */
export const ELASTICSEARCH_USERNAME = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.ELASTICSEARCH_USERNAME)
  .optional();

/**
 * Elasticsearch password
 */
export const ELASTICSEARCH_PASSWORD = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.ELASTICSEARCH_PASSWORD)
  .optional();

/**
 * RabbitMQ connection URL
 */
export const RABBITMQ_URL = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.RABBITMQ_URL)
  .regex(RABBITMQ_URL_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.RABBITMQ_URL_FORMAT,
  });

/**
 * Apache Kafka broker list
 */
export const KAFKA_BROKERS = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.KAFKA_BROKERS)
  .regex(HOST_PORT_LIST_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.HOST_PORT_LIST_FORMAT,
  });

/**
 * Kafka client ID
 */
export const KAFKA_CLIENT_ID = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.KAFKA_CLIENT_ID)
  .min(1, { error: INFRASTRUCTURE_MESSAGES.KAFKA_CLIENT_ID_REQUIRED });

/**
 * Memcached servers list
 */
export const MEMCACHED_SERVERS = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.MEMCACHED_SERVERS)
  .regex(HOST_PORT_LIST_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.HOST_PORT_LIST_FORMAT,
  });

/**
 * Docker registry URL
 */
export const DOCKER_REGISTRY_URL = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.DOCKER_REGISTRY_URL)
  .url({ error: INFRASTRUCTURE_MESSAGES.DOCKER_REGISTRY_URL_FORMAT });

/**
 * Docker registry username
 */
export const DOCKER_REGISTRY_USERNAME = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.DOCKER_REGISTRY_USERNAME)
  .optional();

/**
 * Docker registry password/token
 */
export const DOCKER_REGISTRY_PASSWORD = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.DOCKER_REGISTRY_PASSWORD)
  .optional();

/**
 * Kubernetes namespace
 */
export const KUBERNETES_NAMESPACE = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.KUBERNETES_NAMESPACE)
  .regex(KUBERNETES_NAME_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.KUBERNETES_NAME_FORMAT,
  })
  .default(INFRASTRUCTURE_DEFAULTS.KUBERNETES_NAMESPACE);

/**
 * Kubernetes service account
 */
export const KUBERNETES_SERVICE_ACCOUNT = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.KUBERNETES_SERVICE_ACCOUNT)
  .regex(KUBERNETES_NAME_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.KUBERNETES_SERVICE_ACCOUNT_FORMAT,
  })
  .optional();

/**
 * Prometheus metrics port
 */
export const PROMETHEUS_PORT = z
  .number()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.PROMETHEUS_PORT)
  .int({ error: INFRASTRUCTURE_MESSAGES.PROMETHEUS_PORT_INT })
  .min(INFRASTRUCTURE_LIMITS.PROMETHEUS_PORT_MIN, { error: INFRASTRUCTURE_MESSAGES.PROMETHEUS_PORT_MIN })
  .max(INFRASTRUCTURE_LIMITS.PROMETHEUS_PORT_MAX, { error: INFRASTRUCTURE_MESSAGES.PROMETHEUS_PORT_MAX })
  .default(INFRASTRUCTURE_DEFAULTS.PROMETHEUS_PORT);

/**
 * Jaeger tracing endpoint
 */
export const JAEGER_ENDPOINT = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.JAEGER_ENDPOINT)
  .url({ error: INFRASTRUCTURE_MESSAGES.JAEGER_ENDPOINT_FORMAT })
  .optional();

/**
 * New Relic license key
 */
export const NEW_RELIC_LICENSE_KEY = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.NEW_RELIC_LICENSE_KEY)
  .length(INFRASTRUCTURE_LIMITS.NEW_RELIC_LICENSE_KEY_LENGTH, {
    error: INFRASTRUCTURE_MESSAGES.NEW_RELIC_LICENSE_KEY_LENGTH,
  })
  .optional();

/**
 * Datadog API key
 */
export const DATADOG_API_KEY = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.DATADOG_API_KEY)
  .length(INFRASTRUCTURE_LIMITS.DATADOG_API_KEY_LENGTH, {
    error: INFRASTRUCTURE_MESSAGES.DATADOG_API_KEY_LENGTH,
  })
  .optional();

/**
 * Sentry DSN (Data Source Name)
 */
export const SENTRY_DSN = z
  .string()
  .describe(INFRASTRUCTURE_DESCRIPTIONS.SENTRY_DSN)
  .regex(SENTRY_DSN_PATTERN, {
    error: INFRASTRUCTURE_MESSAGES.SENTRY_DSN_FORMAT,
  })
  .optional();

/**
 * Pre-configured infrastructure schemas for common scenarios
 */
export const infrastructureSchemas = {
  // Azure
  AZURE_STORAGE_CONNECTION_STRING,
  AZURE_STORAGE_ACCOUNT_NAME,
  AZURE_STORAGE_ACCOUNT_KEY,
  AZURE_SERVICE_BUS_CONNECTION_STRING,
  AZURE_EVENT_HUB_CONNECTION_STRING,

  // AWS
  AWS_REGION,
  AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY,
  AWS_S3_BUCKET_NAME,
  AWS_SQS_QUEUE_URL,

  // Search & Analytics
  ELASTICSEARCH_URL,
  ELASTICSEARCH_USERNAME,
  ELASTICSEARCH_PASSWORD,

  // Message Queues
  RABBITMQ_URL,
  KAFKA_BROKERS,
  KAFKA_CLIENT_ID,

  // Caching
  MEMCACHED_SERVERS,

  // Container & Orchestration
  DOCKER_REGISTRY_URL,
  DOCKER_REGISTRY_USERNAME,
  DOCKER_REGISTRY_PASSWORD,
  KUBERNETES_NAMESPACE,
  KUBERNETES_SERVICE_ACCOUNT,

  // Monitoring & Observability
  PROMETHEUS_PORT,
  JAEGER_ENDPOINT,
  NEW_RELIC_LICENSE_KEY,
  DATADOG_API_KEY,
  SENTRY_DSN,
} as const;
